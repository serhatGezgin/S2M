/*
 * generated by Xtext
 */
package org.yazgel.regex.s2m.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class S2MGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cModelKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cAttributesAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cAttributesAttributeParserRuleCall_0_4_0 = (RuleCall)cAttributesAssignment_0_4.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		
		//Model:
		//	"model" ":" name=ID ";" attributes+=Attribute* & rules+=Rule*;
		@Override public ParserRule getRule() { return rule; }

		//"model" ":" name=ID ";" attributes+=Attribute* & rules+=Rule*
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"model" ":" name=ID ";" attributes+=Attribute*
		public Group getGroup_0() { return cGroup_0; }

		//"model"
		public Keyword getModelKeyword_0_0() { return cModelKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_0_3() { return cSemicolonKeyword_0_3; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_0_4() { return cAttributesAssignment_0_4; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_0_4_0() { return cAttributesAttributeParserRuleCall_0_4_0; }

		//rules+=Rule*
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_0() { return cRulesRuleParserRuleCall_1_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTypeJvmTypeCrossReference_5_0 = (CrossReference)cTypeAssignment_5.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cTypeJvmTypeCrossReference_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Attribute:
		//	"attr" name=ID "{" "type" ":" type=[jvmTypes::JvmType|QualifiedName] "}";
		@Override public ParserRule getRule() { return rule; }

		//"attr" name=ID "{" "type" ":" type=[jvmTypes::JvmType|QualifiedName] "}"
		public Group getGroup() { return cGroup; }

		//"attr"
		public Keyword getAttrKeyword_0() { return cAttrKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"type"
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//type=[jvmTypes::JvmType|QualifiedName]
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }

		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_5_0() { return cTypeJvmTypeCrossReference_5_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_5_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_5_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cStartKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cStartIndexAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cStartIndexINTTerminalRuleCall_3_0_1_0 = (RuleCall)cStartIndexAssignment_3_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cStartKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cStartDelimeterAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cStartDelimeterSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cStartDelimeterAssignment_3_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cEndKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cEndIndexAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cEndIndexINTTerminalRuleCall_4_0_1_0 = (RuleCall)cEndIndexAssignment_4_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cEndKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cEndDelimeterAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cEndDelimeterSTRINGTerminalRuleCall_4_1_1_0 = (RuleCall)cEndDelimeterAssignment_4_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		private final Keyword cAttrKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAttrAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cAttrAttributeCrossReference_7_0 = (CrossReference)cAttrAssignment_7.eContents().get(0);
		private final RuleCall cAttrAttributeIDTerminalRuleCall_7_0_1 = (RuleCall)cAttrAttributeCrossReference_7_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Rule:
		//	"rule" name=ID "{" ("start" startIndex=INT "," | "start" startDelimeter=STRING ",") ("end" endIndex=INT "," | "end"
		//	endDelimeter=STRING ",") "attr" ":" attr=[Attribute] "}";
		@Override public ParserRule getRule() { return rule; }

		//"rule" name=ID "{" ("start" startIndex=INT "," | "start" startDelimeter=STRING ",") ("end" endIndex=INT "," | "end"
		//endDelimeter=STRING ",") "attr" ":" attr=[Attribute] "}"
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"start" startIndex=INT "," | "start" startDelimeter=STRING ","
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"start" startIndex=INT ","
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"start"
		public Keyword getStartKeyword_3_0_0() { return cStartKeyword_3_0_0; }

		//startIndex=INT
		public Assignment getStartIndexAssignment_3_0_1() { return cStartIndexAssignment_3_0_1; }

		//INT
		public RuleCall getStartIndexINTTerminalRuleCall_3_0_1_0() { return cStartIndexINTTerminalRuleCall_3_0_1_0; }

		//","
		public Keyword getCommaKeyword_3_0_2() { return cCommaKeyword_3_0_2; }

		//"start" startDelimeter=STRING ","
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"start"
		public Keyword getStartKeyword_3_1_0() { return cStartKeyword_3_1_0; }

		//startDelimeter=STRING
		public Assignment getStartDelimeterAssignment_3_1_1() { return cStartDelimeterAssignment_3_1_1; }

		//STRING
		public RuleCall getStartDelimeterSTRINGTerminalRuleCall_3_1_1_0() { return cStartDelimeterSTRINGTerminalRuleCall_3_1_1_0; }

		//","
		public Keyword getCommaKeyword_3_1_2() { return cCommaKeyword_3_1_2; }

		//"end" endIndex=INT "," | "end" endDelimeter=STRING ","
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"end" endIndex=INT ","
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"end"
		public Keyword getEndKeyword_4_0_0() { return cEndKeyword_4_0_0; }

		//endIndex=INT
		public Assignment getEndIndexAssignment_4_0_1() { return cEndIndexAssignment_4_0_1; }

		//INT
		public RuleCall getEndIndexINTTerminalRuleCall_4_0_1_0() { return cEndIndexINTTerminalRuleCall_4_0_1_0; }

		//","
		public Keyword getCommaKeyword_4_0_2() { return cCommaKeyword_4_0_2; }

		//"end" endDelimeter=STRING ","
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"end"
		public Keyword getEndKeyword_4_1_0() { return cEndKeyword_4_1_0; }

		//endDelimeter=STRING
		public Assignment getEndDelimeterAssignment_4_1_1() { return cEndDelimeterAssignment_4_1_1; }

		//STRING
		public RuleCall getEndDelimeterSTRINGTerminalRuleCall_4_1_1_0() { return cEndDelimeterSTRINGTerminalRuleCall_4_1_1_0; }

		//","
		public Keyword getCommaKeyword_4_1_2() { return cCommaKeyword_4_1_2; }

		//"attr"
		public Keyword getAttrKeyword_5() { return cAttrKeyword_5; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//attr=[Attribute]
		public Assignment getAttrAssignment_7() { return cAttrAssignment_7; }

		//[Attribute]
		public CrossReference getAttrAttributeCrossReference_7_0() { return cAttrAttributeCrossReference_7_0; }

		//ID
		public RuleCall getAttrAttributeIDTerminalRuleCall_7_0_1() { return cAttrAttributeIDTerminalRuleCall_7_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final ModelElements pModel;
	private final AttributeElements pAttribute;
	private final RuleElements pRule;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public S2MGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pAttribute = new AttributeElements();
		this.pRule = new RuleElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.yazgel.regex.s2m.S2M".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"model" ":" name=ID ";" attributes+=Attribute* & rules+=Rule*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Attribute:
	//	"attr" name=ID "{" "type" ":" type=[jvmTypes::JvmType|QualifiedName] "}";
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Rule:
	//	"rule" name=ID "{" ("start" startIndex=INT "," | "start" startDelimeter=STRING ",") ("end" endIndex=INT "," | "end"
	//	endDelimeter=STRING ",") "attr" ":" attr=[Attribute] "}";
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
